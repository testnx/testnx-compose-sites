<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cah on TestNX</title>
    <link>/categories/cah/</link>
    <description>Recent content in cah on TestNX</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="/categories/cah/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Install and setup</title>
      <link>/composite-automation-harness/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/composite-automation-harness/install/</guid>
      <description>1. Install JDK8/11/17 2. Install Maven3+ 3. Add the composite-automation-harness dependency to the maven project JDK8 Based on testng_7.5, selenium_3.141.59, jersey_2.25.1, jackson_2.13.4.2, freemarker_2.3.30, guice_4.2.2
And it is the last build for JDK8
1&amp;lt;dependency&amp;gt; 2 &amp;lt;groupId&amp;gt;tech.testnx.cah&amp;lt;/groupId&amp;gt; 3 &amp;lt;artifactId&amp;gt;composite-automation-harness&amp;lt;/artifactId&amp;gt; 4 &amp;lt;version&amp;gt;3.2.3&amp;lt;/version&amp;gt; 5&amp;lt;/dependency&amp;gt; JDK11 Based on testng_7.8, selenium_4.16.1, jersey_2.41, jackson_2.13.4.2, freemarker_2.3.32, guice_7.0.0 And it is main development branch for now.
1&amp;lt;dependency&amp;gt; 2 &amp;lt;groupId&amp;gt;tech.testnx.cah&amp;lt;/groupId&amp;gt; 3 &amp;lt;artifactId&amp;gt;composite-automation-harness&amp;lt;/artifactId&amp;gt; 4 &amp;lt;version&amp;gt;3.7.0&amp;lt;/version&amp;gt; 5&amp;lt;/dependency&amp;gt; JDK17 Pre-research is done, it is coming soon.</description>
    </item>
    <item>
      <title>Integration with AT Dashboard</title>
      <link>/composite-automation-harness/integration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/composite-automation-harness/integration/</guid>
      <description>1. Download and set up the AT Dashboard service Please refer to AT Dashboard
2. Configure the endpoint of aggregation service of AT Dashboard in Global configure The test result will be published to AT Dashboard automatically
#Enable report aggregation: TRUE, FALSE#If enable, need set up the aggregation service end-pointEnable_Report_Aggregation=FALSEReport_Aggregation_Endpoint=http://at-dashboard-endpoint:8600#Target Dashboard Type: BOOTSTRAP and VUE_VUETIFYDashboard_Type=BOOTSTRAP 3. Two Automation Dashboard types are available: BOOTSTRAP and VUE_VUETIFY BOOTSTRAP type: Dashboard UI is based on BOOTSTRAP</description>
    </item>
    <item>
      <title>Quick start by template</title>
      <link>/composite-automation-harness/quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/composite-automation-harness/quickstart/</guid>
      <description>1. Check out the quick start project from github [Git URL: https://github.com/testnx/CAH-quick-start-by-template.git]
2. Two branches JDK8 Branch: jdk8+composite-automation-harnessV3.2.3
Based on JDK8 and composite-automation-harnessV3.2.3 JDK11 Branch: main
Based on JDK11 and composite-automation-harnessV3.7.0 or the latest version 3. Basic examples Basic tests in package &#39;tech.testnx.cah.quickstart.basic&#39;, that demonstrate the usage of Web UI, Restful API, test data, environments, configurations and reporting.
4. Advanced examples Advanced tests in package &#39;tech.testnx.cah.quickstart.advanced&#39;, that demonstrate the usage of ECO Design Pattern.</description>
    </item>
    <item>
      <title>User manual</title>
      <link>/composite-automation-harness/manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/composite-automation-harness/manual/</guid>
      <description>1. Each test class extends from AbstractTest Test class extends tech.testnx.cah.AbstractTest Implements method getModuleName() 2. Managed WebDriver Get a default webdriver specified in global-config.properties
WebDriver driver = getDriver();
Get a specific webdriver
WebDriver driver = newChromeDriver();
WebDriver driver = newFirefoxDriver();
WebDriver driver = newIeDriver();
Customized the WebDriver by listeners WebDriver driver = getDriver();
WebDriverEventListener listener= new AbstractWebDriverEventListener() {};
driver = registerDriverListener(driver, listener);
driver = unregisterDriverListener(driver, listener);
Managed the WebDrivers by pool WebDriver driver1 = requestWebDriver();</description>
    </item>
    <item>
      <title>Sample Reports</title>
      <link>/composite-automation-harness/sample-reports/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/composite-automation-harness/sample-reports/</guid>
      <description>1. All in ONE report powered by VUE All in ONE Report by VUE
2. Function Test Report powered by Bootstrap Function Test Report by Bootstrap
3. Function Test Report powered by Excel Function Test Report by Excel
4. Web UI Performance Report powered by Bootstrap Web UI Performance Report by Bootstrap
5. Web UI Performance Report powered by Excel Web UI Performance Report by Excel
6. Web API Performance Report powered by Bootstrap Web API Performance Report by Bootstrap</description>
    </item>
  </channel>
</rss>
