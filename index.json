[{"body":" The Composite Automation Harness is the java automation solution for Web UI, RESTful API and Windows GUI. It is built on top of Selenium, Jersey, AutoIT and TestNG.\n1. Managed WebDriver and REST Client with rich features and possibilities Web UI testing based on managed WebDriver with flexible listeners RESTful API testing based on managed REST Client with flexible listeners Both WebDriver and REST Client can be customized by user listeners to extend their capabilities 2. Secured and zero effort test data management with multiple data types Both JSON and XLS is supported for test data Auto-binding between test and data with zero effort, support data types: Boolean, Short, Integer, Long, Float, Double, String, JsonNode, TransformableTestDataBean(interface) Auto-Decrypt to secured test data, user only needs to focus on data use 3. Test, data and config are modularized for the large project and multiple environments All tests in multiple modules shared with base formwork and global configuration Each test and data have own module, it is flexible for the large project One test is mapped to multiple data sets for different environment support data driven test 4. Secure network connection is easy Network tunnels creation and deletion are managed by framework with multiple providers: JSCH, SSHJ, SSHD, PUTTY Support the transaction in automation process 5. Rich report types(Console, XLS, HTML) and contents(function result, UI performance and API performance) Report type has Console, XLS, HTML Report contains Test ID, Name, Description, Duration, Recording for each case, Errors, Exceptions, Logs and Screenshot for failed case Provide performance reports of both Web UI testing and API testing without additional effort. Performance Monitor Types: Rest Client Monitor, Web Browser Monitor and Http Proxy Monitor 6. ECO Design Pattern Auto-detect automation accident and auto-retry at right place and right timing within a minimum scope, and no retry code in test. This is one answer to question why human can do successfully but automation cannot 7. Framwork diagram ","link":"/composite-automation-harness/","section":"composite-automation-harness","title":"A brief of composite automation harness"},{"body":"AT dashboard is the spring boot webapp, test results will be published automatically from multiple test execution nodes to AT dashboard service. User can view all test results by multiple filters and add comments into test cycle in AT dashboard. Then can delete test cycle or execute merge between multiple test cycles.\nLogin Home View all test cycle results by multiple filter View test cycle result detail, delete test cycle and add comments to test cycle Merge two test cycle ","link":"/at-dashboard/","section":"at-dashboard","title":"AT Dashboard"},{"body":"CAH API Doc Hub 3.2.3 CAH API Doc (JDK8) 3.4.2 CAH API Doc (JDK11) 4.0.0 CAH API Doc (JDK17) coming soon ","link":"/cah-api-doc/","section":"cah-api-doc","title":"CAH API Doc"},{"body":"1. Install JDK8/11/17 2. Install Maven3+ 3. Add the composite-automation-harness dependency to the maven project JDK8 Based on testng_7.5, selenium_3.141.59, jersey_2.25.1, jackson_2.13.4.2, freemarker_2.3.30, guice_4.2.2\nAnd it is the last build for JDK8\n1\u0026lt;dependency\u0026gt; 2 \u0026lt;groupId\u0026gt;tech.testnx.cah\u0026lt;/groupId\u0026gt; 3 \u0026lt;artifactId\u0026gt;composite-automation-harness\u0026lt;/artifactId\u0026gt; 4 \u0026lt;version\u0026gt;3.2.3\u0026lt;/version\u0026gt; 5\u0026lt;/dependency\u0026gt; JDK11 Based on testng_7.8, selenium_4.16.1, jersey_2.41, jackson_2.13.4.2, freemarker_2.3.32, guice_7.0.0 And it is main development branch for now.\n1\u0026lt;dependency\u0026gt; 2 \u0026lt;groupId\u0026gt;tech.testnx.cah\u0026lt;/groupId\u0026gt; 3 \u0026lt;artifactId\u0026gt;composite-automation-harness\u0026lt;/artifactId\u0026gt; 4 \u0026lt;version\u0026gt;3.4.2\u0026lt;/version\u0026gt; 5\u0026lt;/dependency\u0026gt; JDK17 Pre-research is done, it is coming soon.\n1\u0026lt;dependency\u0026gt; 2 \u0026lt;groupId\u0026gt;tech.testnx.cah\u0026lt;/groupId\u0026gt; 3 \u0026lt;artifactId\u0026gt;composite-automation-harness\u0026lt;/artifactId\u0026gt; 4 \u0026lt;version\u0026gt;4.x.x\u0026lt;/version\u0026gt; 5\u0026lt;/dependency\u0026gt; 4. Create and configure the directories in the maven project Create the \u0026quot;resources\u0026quot; directory in home of the maven project and sub-directories based on below diagram. For exmape, there are two modules named module-1 and module-N, and two test environments named env1 and env2. In general the directories are created automatically when the first test execution.\ngraph LR\rA[Project] --\u003e B(src) --\u003e B.1(test)\rA[Project] --\u003e C(resources)\rA[Project] --\u003e D(pom.xml)\rC --\u003e C.1(config)\rC.1 --\u003e C.1.1(global-config.properties)\rC.1 --\u003e C.1.2(module-1-config.properties)\rC.1 --\u003e C.1.3(module-N-config.properties)\rC --\u003e C.2(data)\rC.2 --\u003e C.2.1(json)\rC.2.1 --\u003e C.2.1.1(module-1)\rC.2.1.1 --\u003e C.2.1.1.1(env1) --\u003e C.2.1.1.1.1(\"module-1@env1.json\")\rC.2.1.1 --\u003e C.2.1.1.2(env2) --\u003e C.2.1.1.2.1(\"module-1@env2.json\")\rC.2.1 --\u003e C.2.1.2(module-N)\rC.2.1.2 --\u003e C.2.1.2.1(env1) --\u003e C.2.1.2.1.1(\"module-N@env1.json\")\rC.2.1.2 --\u003e C.2.1.2.2(env2) --\u003e C.2.1.2.2.1(\"module-N@env2.json\")\rC.2 --\u003e C.2.2(xls)\rC.2.2 --\u003e C.2.2.1(module-1)\rC.2.2.1 --\u003e C.2.2.1.1(env1) --\u003e C.2.2.1.1.1(\"module-1@env1.xls\")\rC.2.2.1 --\u003e C.2.2.1.2(env2) --\u003e C.2.2.1.2.1(\"module-1@env2.xls\")\rC.2.2 --\u003e C.2.2.2(module-N)\rC.2.2.2 --\u003e C.2.2.2.1(env1) --\u003e C.2.2.2.1.1(\"module-N@env1.xls\")\rC.2.2.2 --\u003e C.2.2.2.2(env2) --\u003e C.2.2.2.2.1(\"module-N@env2.xls\")\rC --\u003e C.3(driver)\rC.3 --\u003e C.3.1(chrome)\rC.3 --\u003e C.3.2(firefox)\rC.3.2 --\u003e C.3.2.1(win32)\rC.3.2 --\u003e C.3.2.2(win64)\rC.3 --\u003e C.3.3(IE)\rC.3.3 --\u003e C.3.3.1(win32)\rC.3.3 --\u003e C.3.3.2(win64)\rC --\u003e C.4(logs)\rC.4 --\u003e C.4.1(browser)\rC --\u003e C.5(reports)\rC --\u003e C.6(temp)\r5. Create the module configure files and module data files In this case, there two modules(module-1 and module-N) and two environments(env1 and env2). Like module-1-config.properties, module-1@env1.xls and module-1@env1.json...\n6. Download Chrome Driver, Firefox Driver or IE Driver to target directories. Chrome Driver Firefox Driver IE Driver 7. Create and set up the global-config.properties 1#Project name and AT owner 2Project_Name=Your_Project_Name 3Project_Owner=Your_Project_Owner 4 5#Browser: CHROME, FIREFOX32, FIREFOX64, IE32, IE64, EDEG 6Driver_Browser_Name=CHROME 7#Browser headless(True/False): Only valid for Chrome and Firefox 8Browser_Headless=false 9 10#Driver timeout setting, Unit: SECOND 11Driver_Implicit_Timeout=10 12Driver_Script_Timeout=10 13Driver_PageLoad_Timeout=60 14 15#Failure screenshot strategy: DEFAULT, FULL_SCREEN, FULL_DOM_PAGE 16#DEFAULT will not change browser display mode and just keep the original status before take screenshot 17#FULL_SCREEN will change browser display mode as full screen before take screenshot 18#FULL_DOM_PAGE will take screenshot for entire DOM page 19Failure_Screenshot_Strategy=DEFAULT 20 21#Retry count when a test is failed, that will re-execute entire test. Value 0 means no retry. 22Retry_Count=0 23 24#Log Level: TRACE, DEBUG, INFO, WARN, ERROR 25Log_Level=INFO 26 27#Log timezone: Asia/Shanghai America/Los_Angeles 28Log_TimeZone=Asia/Shanghai 29 30#Test Environment: env1, env2 31Test_Environment=env1 32 33#Test Data type: xls, json 34TEST_DATA_TYPE=json 35 36#SSH Client: JSCH, SSHJ, SSHD, PUTTY 37SSH_Client=JSCH 38 39#Report type(support multiple reports): CONSOLE, EXCEL, HTML_BOOTSTRAP, HTML_VUE_VUETIFY 40Report_Type=CONSOLE, EXCEL, HTML_BOOTSTRAP, HTML_VUE_VUETIFY 41 42#Keep reports history: TRUE, FALSE 43Keep_Reports=FALSE 44 45#Enable report aggregation: TRUE, FALSE 46#If enable, need set up the aggregation service end-point 47Enable_Report_Aggregation=FALSE 48Report_Aggregation_Endpoint=http://localhost:8600 49 50#Monitor Provider(support multiple provider): Http_Archiver_Monitor, Web_API_Perf_Monitor, Web_UI_Perf_Monitor 51Monitor_Provider=Web_API_Perf_Monitor, Web_UI_Perf_Monitor 52#Enable Performance Monitoring: TRUE, FALSE 53Enable_Performance_Monitor=TRUE ","categories":"cah","link":"/composite-automation-harness/install/","section":"composite-automation-harness","tags":"at,tech","title":"Install and setup"},{"body":" First Rebuild front end with Vue and Vuetify Second Import Web API performance results Import Web UI performance results Third Add new dashboard for across multiple resources ? ","link":"/at-dashboard/next/","section":"at-dashboard","title":"Next"},{"body":"1. Download and set up the AT Dashboard service Please refer to AT Dashboard\n2. Configure the endpoint of aggregation service of AT Dashboard in Global configure The test result will be published to AT Dashboard automatically\n#Enable report aggregation: TRUE, FALSE\r#If enable, need set up the aggregation service end-point\rEnable_Report_Aggregation=FALSE\rReport_Aggregation_Endpoint=http://at-dashboard-endpoint:8600 ","categories":"cah","link":"/composite-automation-harness/integration/","section":"composite-automation-harness","tags":"at,tech","title":"Integration with AT Dashboard"},{"body":"1. Check out the quick start project from github [Git URL: https://github.com/testnx/CAH-quick-start-by-template.git]\n2. Basic examples Basic tests in package 'tech.testnx.cah.quickstart.basic', that demonstrate the usage of Web UI, Restful API, test data, environments, configurations and reporting.\n3. Advanced examples Advanced tests in package 'tech.testnx.cah.quickstart.advanced', that demonstrate the usage of ECO Design Pattern.\n","categories":"cah","link":"/composite-automation-harness/quickstart/","section":"composite-automation-harness","tags":"at,tech","title":"Quick start by template"},{"body":"1. Each test class extends from AbstractTest Test class extends tech.testnx.cah.AbstractTest Implements method getModuleName() 2. Managed WebDriver Get a default webdriver specified in global-config.properties\nWebDriver driver = getDriver();\nGet a specific webdriver\nWebDriver driver = newChromeDriver();\nWebDriver driver = newFirefoxDriver();\nWebDriver driver = newIeDriver();\nCustomized the WebDriver by listeners WebDriver driver = getDriver();\nWebDriverEventListener listener= new AbstractWebDriverEventListener() {};\ndriver = registerDriverListener(driver, listener);\ndriver = unregisterDriverListener(driver, listener);\nManaged the WebDrivers by pool WebDriver driver1 = requestWebDriver();\nWebDriver driver2 = this.requestWebDriver(BrowserType.CHROME);\nWebDriver driver3 = this.requestWebDriver(BrowserType.FIREFOX64);\nreleaseWebDriver(driver1);\nreleaseWebDriver(driver2);\nreleaseWebDriver(driver3);\n3. Managed RESTful API Client Get a RestClient and RestClientV2\nRestClient client = RestClient.newInstance(\u0026quot;http://endpoint/api/\u0026quot;);\nRestfulResponse response = client.doGet();\nAssert.assertEquals(response.getStatus(), 200);\nRestClientV2 clientV2 = RestClientV2.newInstance();\nRestfulResponse response = clientV2.doGet(\u0026quot;http://endpoint/api/\u0026quot;, null);\nAssert.assertEquals(response.getJsonParser().getStringValue(\u0026quot;status\u0026quot;), \u0026quot;success\u0026quot;);\nAssert.assertEquals(response.getJsonParser().getIntValue(\u0026quot;data[2].employee_age\u0026quot;), 65);\nCustomized the RestClient by listeners RestClientV2 client = RestClientV2.newInstance();\nRestClientListener listener = new RestClientListener() {};\nclient.registerListener(listener);\nclient.unregisterListener(listener);\n4. Test Data Management Test data type supported: JSON and XLS\nTest @Test\r@Description(testIDs = \u0026#34;T-005\u0026#34;, title = \u0026#34;Data Ready\u0026#34;, description = \u0026#34;Test plus: ${{1}} + ${{2}} = ${{3}}?\u0026#34;)\rpublic void testDataPlus(String description, int first, int second, int result) {\rRecorder.log(description);\rAssert.assertEquals(first + second, result);\r}\r@Test\r@Description(testIDs = \u0026#34;T-006\u0026#34;, title = \u0026#34;Data Ready2\u0026#34;, description = \u0026#34;Test minus: ${{1}} - ${{2}} = ${{3}}?\u0026#34;)\rpublic void testDataMinus(String description, int first, int second, int result) {\rRecorder.log(description);\rAssert.assertEquals(first - second, result);\r} Json {\r\u0026#34;common\u0026#34;: {\r\u0026#34;commonData1\u0026#34;: \u0026#34;value for commonData1\u0026#34;\r},\r\u0026#34;tests\u0026#34;: {\r\u0026#34;BasicTests\u0026#34;: {\r\u0026#34;testDataPlus\u0026#34;: [\r{\r\u0026#34;description\u0026#34;: \u0026#34;Verify the 5 + 5 = 10?\u0026#34;,\r\u0026#34;first\u0026#34;: 5,\r\u0026#34;second\u0026#34;: 5,\r\u0026#34;result\u0026#34;: 10\r}\r],\r\u0026#34;testDataMinus\u0026#34;: [\r{\r\u0026#34;description\u0026#34;: \u0026#34;Verify the 7 - 5 = 1?\u0026#34;,\r\u0026#34;first\u0026#34;: 7,\r\u0026#34;second\u0026#34;: 5,\r\u0026#34;result\u0026#34;: 1\r}\r]\r}\r}\r} xls Auto-binding between test and data with zero effort, support types: Boolean, Short, Integer, Long, Float, Double, String, JsonNode, TransformableTestDataBean(interface)\nTest(JsonNode)\n@Test\rpublic void test3(String testname, JsonNode node) {\rSystem.out.println(testname);\rSystem.out.println(node.toString());\rSystem.out.println(node.path(\u0026#34;student\u0026#34;).path(0).path(\u0026#34;name\u0026#34;).asText());\r} Json(JsonNode)\n\u0026#34;test3\u0026#34;: [\r{\r\u0026#34;testname\u0026#34;: \u0026#34;TESTCASE-3\u0026#34;,\r\u0026#34;node\u0026#34;: {\r\u0026#34;student\u0026#34;: [\r{\r\u0026#34;id\u0026#34;: 1,\r\u0026#34;name\u0026#34;: \u0026#34;Tom\u0026#34;,\r\u0026#34;isNew\u0026#34;: true\r},\r{\r\u0026#34;id\u0026#34;: 2,\r\u0026#34;name\u0026#34;: \u0026#34;Nick\u0026#34;,\r\u0026#34;isNew\u0026#34;: false\r}\r]\r}\r}\r] XLS(JsonNode) Data Bean(TransformableTestDataBean)\n1 public class Test4DataBean implements TransformableTestDataBean\u0026lt;Test4DataBean\u0026gt; { 2 3 public int id; 4 public String name; 5 public boolean isNew; 6 7 @Override 8 public Test4DataBean transformTestData(String content) { 9 10\ttry { 11\treturn Utilities.jsonUtility.getMapper().readValue(content, Test4DataBean.class); 12\t} catch (IOException e) { 13\tLogger.getLogger().error(\u0026#34;Failed to transform test data from: \u0026#34; + content); 14\te.printStackTrace(); 15\tthrow new RuntimeException(\u0026#34;Failed to transform test data\u0026#34;); 16\t} 17 } 18 19 @Override 20 public boolean equalsValue(Test4DataBean t) { 21 22 if (id != t.id) return false; 23 if (!name.equals(t.name)) return false; 24 if (isNew != t.isNew) return false; 25 return true; 26 } 27 } Test(TransformableTestDataBean)\n@Test\rpublic void test4(String testname, Test4DataBean bean) {\rSystem.out.println(testname);\rSystem.out.println(bean.id);\rSystem.out.println(bean.name);\rSystem.out.println(bean.isNew);\r} Json(TransformableTestDataBean)\n\u0026#34;test4\u0026#34;: [\r{\r\u0026#34;testname\u0026#34;: \u0026#34;TESTCASE-4\u0026#34;,\r\u0026#34;Test4DataBean\u0026#34;: {\r\u0026#34;id\u0026#34;: 1,\r\u0026#34;name\u0026#34;: \u0026#34;Tom\u0026#34;,\r\u0026#34;isNew\u0026#34;: true\r}\r}\r] XLS(TransformableTestDataBean) Data driven test\nIf one test has multiple data groups, the test will be automatically executed multiple times with different data group\nTest @Test\rpublic void testSample(String a, String b){\rSystem.out.println(a + \u0026#34; :::: \u0026#34; + b);\r} JSON \u0026#34;DataDrivenTests\u0026#34;: {\r\u0026#34;testSample\u0026#34;: [\r{\r\u0026#34;a\u0026#34;: \u0026#34;my key\u0026#34;,\r\u0026#34;b\u0026#34;: \u0026#34;my value\u0026#34;\r},\r{\r\u0026#34;a\u0026#34;: \u0026#34;your key\u0026#34;,\r\u0026#34;b\u0026#34;: \u0026#34;your value\u0026#34;\r}\r] XLS Auto-Decrypt secured test data Encrypted test data by Utilities.securityUtility.encrypt() and save them in data file, then the test data will be auto-decrypted for test\n5. Network tunnels creation and deletion by JSCH, SSHJ, SSHD, PUTTY User can choose the provider in global-config.properties. Multiple network tunnels can be created in one machine and network tunnel life cycle is managed by test.\n#SSH Client: JSCH, SSHJ, SSHD, PUTTY SSH_Client=JSCH SshClient client = SshClientProvider.provide(sshServerHost, sshServerPort, userName, password);\rclient.setTunnel(localPort, remoteHost, remotePort);\rclient.unsetTunnel(localPort);\rclient.disconnect(); 6. Native Logger User can choose Logger Level(TRACE, DEBUG, INFO, WARN, ERROR) in global-config.properties\nGlobal Config #Log Level: TRACE, DEBUG, INFO, WARN, ERROR\rLog_Level=INFO Test code Logger logger = Logger.getLogger();\rlogger.trace(\u0026#34;\u0026#34;);\rlogger.debug(\u0026#34;\u0026#34;);\rlogger.info(\u0026#34;\u0026#34;);\rlogger.warn(\u0026#34;\u0026#34;);\rlogger.error(\u0026#34;\u0026#34;); 7. CAH Assert CahAssert is 100% compatible with testNG Assert. Actually CahAssert is the delegate of testNG Assert. CahAssert saves all assert detail information into AssertRecord, which will be displayed in reports. @Test\rpublic void testCahAssert() {\rObject[] actual = {1.5, 1.6, 1.7, 1.8};\rObject[] expected = {1.9, 1.6, 1.7, 1.8};\rCahAssert.assertNotEquals(actual , expected, \u0026#34;Check if object array is equal\u0026#34;);\r} AssertRecord.Extra is information holder if need to save extra information into records, which will be displayed in reports. Extra information only be available and saved into next assert. @Test\rpublic void testCahAssert() {\rObject[] actual = {1.5, 1.6, 1.7, 1.8};\rObject[] expected = {1.9, 1.6, 1.7, 1.8};\rAssertRecord.Extra.setExtra(\u0026#34;This is the first extra information for testCahAssert\u0026#34;);\rCahAssert.assertNotEquals(actual , expected, \u0026#34;The first extra information is available and saved into this assert\u0026#34;);\rCahAssert.assertNotEquals(actual , expected, \u0026#34;The first extra information is not available and saved into this assert\u0026#34;);\rAssertRecord.Extra.setExtra(\u0026#34;This is the second extra information for testCahAssert\u0026#34;);\rCahAssert.assertEquals(actual , expected, \u0026#34;The second extra information is available and saved into this assert\u0026#34;);\r} 8. Test reporting Annotation for report: @Description\n@Test\r@Description(testIDs = \u0026#34;T-001\u0026#34;, title = \u0026#34;Knock Bing By Browser\u0026#34;,\rsubmodule = \u0026#34;UI testing\u0026#34;,\rdescription = \u0026#34;Knock bing by keywords ${{0}} and check search result with ${{1}}\u0026#34;)\rpublic void testKnockBingByBrowser(String keywords, String result) {} Recorder: record test flow and status in report\nRecorder.log(String msg);\rRecorder.log(Recordable rec); Report type: CONSOLE, EXCEL, HTML_BOOTSTRAP, HTML_VUE_VUETIFY User can choose report types in global-config.properties. Report contains Test ID, Name, Description, Duration, Recording for each case, Errors, Exceptions, Logs and Screenshot for failed cases\n#Report type(support multiple reports): CONSOLE, EXCEL, HTML_BOOTSTRAP, HTML_VUE_VUETIFY\rReport_Type=CONSOLE, EXCEL, HTML_BOOTSTRAP, HTML_VUE_VUETIFY Console report HTML_BOOTSTRAP report (ONE page) HTML_VUE_VUETIFY report (all in ONE page) EXCEL report Performance monitoring reports: CONSOLE, EXCEL, HTML_BOOTSTRAP\nUser can choose monitor providers in global-config.properties\n#Monitor Provider(support multiple provider): Http_Archiver_Monitor, Web_API_Perf_Monitor, Web_UI_Perf_Monitor\rMonitor_Provider=Web_API_Perf_Monitor, Web_UI_Perf_Monitor\r#Enable Performance Monitoring: TRUE, FALSE\rEnable_Performance_Monitor=TRUE Http_Archiver_Monitor\nRecording all http activities for both Web UI test and Restful API test, finally http archive file is generated like 'CAH_AT_Performance.har'. Then view it by http archive viewer\nWeb_API_Perf_Monitor Console Web API Performance Report HTML Web API Performance Report XLS Web API Performance Report Web_UI_Perf_Monitor Console Web UI Performance Report HTML Web UI Performance Report XLS Web UI Performance Report 9. ECO Design Pattern Auto-detect automation accident and auto-retry at right place and right timing within a minimum scope, and no retry code in test Roles: Executor, Controller, Operator (ECO) Scopes: Test, Step, Action Stop retry with two conditions Reach max retry threshold Face critical errors (java.lang.Error, java.lang.AssertionError, tech.testnx.cah.common.exceptions.StopTestError) ECO Model\nECO Flow\nExample code Executor @Executor\rpublic class AdvancedTests extends TestBase {\rprivate BingController bingController;\rprivate WebDriver driver;\r@BeforeMethod\rpublic void beforeMethod() {\rdriver = getDriver();\rbingController = new BingController(driver);\r}\r@Test\r@Description(testIDs = \u0026#34;T-001\u0026#34;, title = \u0026#34;Bing Search\u0026#34;, submodule = \u0026#34;bing\u0026#34;, description = \u0026#34;Search Bing by keywords ${{0}}\u0026#34;)\rpublic void testBingSearch(String keywords, String expectedTitle) {\rString url = \u0026#34;https://bing.com\u0026#34;;\rbingController.searchAndCheck(url, keywords, expectedTitle);\r}\r} Controller @Controller\rpublic class BingController extends ControllerBase {\rprivate BingSearchPO bingSearchPO;\rprivate WebDriver driver;\rpublic BingController(WebDriver driver) {\rthis.driver = driver;\rbingSearchPO = new BingSearchPO(driver);\r}\rprotected BingController() {}\r@Step(description = \u0026#34;Search Bing and check result\u0026#34;, retry = 2, intervalWaitInSecond = 3)\rpublic void searchAndCheck(String url, String keywords, String expectedTitle) {\rdriver.get(url);\rbingSearchPO.search(keywords);\rString result = bingSearchPO.getResultTitle();\rlogger.debug(\u0026#34;Search result title: \u0026#34; + result);\rAssert.assertTrue(result.equalsIgnoreCase(expectedTitle));\r}\r} Operator @Operator\rpublic class BingSearchPO extends PageBase {\r@FindBy(name = \u0026#34;q\u0026#34;)\rprivate WebElement searchbox;\r@FindBy(id = \u0026#34;search_icon\u0026#34;)\rprivate WebElement searchButton;\rpublic BingSearchPO(WebDriver driver) {\rsuper(driver);\r}\rprotected BingSearchPO() {}\r@Override\rpublic void waitForReady() {}\r/**\r* Action: Search Bing by keywords\r*/\r@Action(description = \u0026#34;Search Bing by Keywords: ${{0}}\u0026#34;, retry = 2, intervalWaitInSecond = 3)\rpublic void search(String keywords) {\rwaitForReadyAndCapturePagePerf();\rsearchbox.clear();\rsearchbox.sendKeys(keywords);\rUtilities.timeUtility.sleep(2);\rsearchButton.click();\r}\r/**\r* Action: Get result title\r*/\r@Action(description = \u0026#34;Get result title\u0026#34;, retry = 2, intervalWaitInSecond = 3)\rpublic String getResultTitle() {\rwaitForReadyAndCapturePagePerf();\rreturn driver.getTitle();\r}\r} ","categories":"cah","link":"/composite-automation-harness/manual/","section":"composite-automation-harness","tags":"at,tech","title":"User manual"},{"body":"jQuery v3.6.1 jQuery License jQuery v 3.6.1 Copyright OpenJS Foundation and other contributors, https://openjsf.org/ Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u0026#34;Software\u0026#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u0026#34;AS IS\u0026#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ****************************************** The jQuery JavaScript Library v3.6.1 also includes Sizzle.js Sizzle.js includes the following license: Copyright JS Foundation and other contributors, https://js.foundation/ This software consists of voluntary contributions made by many individuals. For exact contribution history, see the revision history available at https://github.com/jquery/sizzle The following license applies to all parts of this software except as documented below: ==== Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u0026#34;Software\u0026#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u0026#34;AS IS\u0026#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ==== All files located in the node_modules and external directories are externally maintained libraries used by this software which have their own licenses; we recommend you read them, as their terms may differ from the terms above. ********************* ","link":"/cah-api-doc/jdk11/legal/jquery/","section":"cah-api-doc","title":""},{"body":"jQuery UI v1.13.2 jQuery UI License Copyright jQuery Foundation and other contributors, https://jquery.org/ This software consists of voluntary contributions made by many individuals. For exact contribution history, see the revision history available at https://github.com/jquery/jquery-ui The following license applies to all parts of this software except as documented below: ==== Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u0026#34;Software\u0026#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u0026#34;AS IS\u0026#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ==== Copyright and related rights for sample code are waived via CC0. Sample code is defined as all source code contained within the demos directory. CC0: http://creativecommons.org/publicdomain/zero/1.0/ ==== All files located in the node_modules and external directories are externally maintained libraries used by this software which have their own licenses; we recommend you read them, as their terms may differ from the terms above. ","link":"/cah-api-doc/jdk11/legal/jqueryui/","section":"cah-api-doc","title":""},{"body":"","link":"/tags/at/","section":"tags","title":"at"},{"body":"","link":"/categories/cah/","section":"categories","title":"cah"},{"body":"","link":"/categories/","section":"categories","title":"Categories"},{"body":"","link":"/tags/","section":"tags","title":"Tags"},{"body":"","link":"/tags/tech/","section":"tags","title":"tech"},{"body":"Why the software automation testing is still painful? No all in one and out of box solution for free Not intelligent as human to face and solve the unkown situations No multiple measures by the one test What is the Composite Automation Harness? The Composite Automation Harness is the java automation solution for Web UI, RESTful API and Windows GUI. It is built on top of Selenium, Jersey, AutoIT and TestNG.\nManaged WebDriver and REST Client with rich features and possibilities Secured and zero effort test data management with multiple data types Tests, data and configurations are modularized for the large project and multiple environments Secure network connection is easy Rich report types(Console, XLS, HTML) and contents(function result, UI performance and API performance) ECO Design Pattern. Auto-detect automation accident and auto-retry at right place and right timing within a minimum scope, and no retry code in test. This is one answer to question why human can do successfully but automation cannot Learn More...\nWhat is the AT Dashboard? AT dashboard is the spring boot webapp, test results will be published automatically from test execution node to AT dashboard service. User can view all test results by multiple filters and add comments into test cycle in AT dashboard. Then can delete test cycle or execute merge between multiple test cycles.\nLearn More...\n","link":"/","section":"","title":"WebSite Home"}]