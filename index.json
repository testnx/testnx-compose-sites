[{"body":"The notes about how to use AT Dashboard\n","link":"/at-dashboard/","section":"at-dashboard","title":"AT Dashboard"},{"body":"First part this is content for First part\n1.1 this is content\nthis is content\n1.2 this is content\nthis is content\nthis is content\nthis is content\nSecond part this is content for Second part\n2.1 this is a link\n2.2 2.3 header 1 header 2 header 3 data1.1 data1.2 data1.3 data2.1 data2.2 data2.3 2.4 // public class HelloWorld { public static void main(String[] args) { System.out.println(\u0026#34;Hello,World!\u0026#34;); } } this last piece of Second part\nThird part this is content for third part\n3.1 item1 sub1\nsub2\nsub3\nitem2 item3 3.2 item1 item2 item3 ","categories":"N1,N2","link":"/at-dashboard/how-to-use-title/","section":"at-dashboard","tags":"tech,pop","title":"How to use title"},{"body":"1. Managed WebDriver and REST Client with rich features and possibilities\nWeb UI testing based on managed WebDriver with flexible listeners RESTful API testing based on managed REST Client with flexible listeners Both WebDriver and REST Client can be customized by user listeners to extend their capabilities 2. Secured and zero effort test data management with multiple data types\nBoth JSON and XLS is supported for test data Auto-binding between test and data with zero effort, support data types: Boolean, Short, Integer, Long, Float, Double, String, JsonNode, TransformableTestDataBean(interface) Auto-Decrypt to secured test data, user only needs to focus on data use 3. Secure network connection is easy\nNetwork tunnels creation and deletion are managed by framework with multiple providers: JSCH, SSHJ, SSHD, PUTTY Support the transaction in automation process 4. Rich report types(Console, XLS, HTML) and contents(function result, UI performance and API performance)\nReport type has Console, XLS, HTML Report contains Test ID, Name, Description, Duration, Recording for each case, Errors, Exceptions, Logs and Screenshot for failed case Provide performance reports of both Web UI testing and API testing without additional effort. Performance Monitor Types: Rest Client Monitor, Web Browser Monitor and Http Proxy Monitor 5. ECO Design Pattern\nAuto-detect automation accident and auto-retry at right place and right timing within a minimum scope, and no retry code in test. This is one answer to question why human can do successfully but automation cannot? ","link":"/composite-automation-harness/","section":"composite-automation-harness","title":"A brief of composite automation harness"},{"body":"First part this is content for First part\n1.1 this is content\nthis is content\n1.2 this is content\nthis is content\nthis is content\nthis is content\nSecond part this is content for Second part\n2.1 this is a link\n2.2 2.3 header 1 header 2 header 3 data1.1 data1.2 data1.3 data2.1 data2.2 data2.3 2.4 // public class HelloWorld { public static void main(String[] args) { System.out.println(\u0026#34;Hello,World!\u0026#34;); } } this last piece of Second part\nThird part this is content for third part\n3.1 item1 sub1\nsub2\nsub3\nitem2 item3 3.2 item1 item2 item3 ","categories":"N1,N2","link":"/at-dashboard/how-to-use-editor/","section":"at-dashboard","tags":"tech,pop","title":"How to use editor"},{"body":" Install JDK8+ or OpenJDK8+ Install Maven3+ Add the composite-automation-harness dependency to your maven project \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;tech.testnx.cah\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;composite-automation-harness\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.0.4\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ","categories":"cah","link":"/composite-automation-harness/install/","section":"composite-automation-harness","tags":"at,tech","title":"Install and setup"},{"body":"","link":"/categories/","section":"categories","title":"Categories"},{"body":"","link":"/categories/n1/","section":"categories","title":"N1"},{"body":"","link":"/categories/n2/","section":"categories","title":"N2"},{"body":"","link":"/tags/pop/","section":"tags","title":"pop"},{"body":"","link":"/tags/","section":"tags","title":"Tags"},{"body":"","link":"/tags/tech/","section":"tags","title":"tech"},{"body":"Why the software automation testing is still painful? No all in one and out of box solution for free Not intelligent as human to face and solve the unkown situations No multiple measures by the one test What is the Composite Automation Harness? The Composite Automation Harness is the java automation solution for Web UI, RESTful API and Windows GUI. It is built on top of Selenium, Jersey, AutoIT and TestNG.\nManaged WebDriver and REST Client with rich features and possibilities Secured and zero effort test data management with multiple data types Secure network connection is easy Rich report types(Console, XLS, HTML) and contents(function result, UI performance and API performance) ECO Design Pattern. Auto-detect automation accident and auto-retry at right place and right timing within a minimum scope, and no retry code in test. This is one answer to question why human can do successfully but automation cannot? Learn More\u0026hellip;\nWhat is the AT Dashboard? AT dashboard is the spring boot webapp, test results will be published automatically from test execution node to AT dashboard service. User can view all test results by multiple filters and add comments into test cycle in AT dashboard. Then can delete test cycle or execute merge between multiple test cycles.\nLearn More\u0026hellip;\n","link":"/","section":"","title":"WebSite Home"},{"body":"","link":"/tags/at/","section":"tags","title":"at"},{"body":"","link":"/categories/cah/","section":"categories","title":"cah"}]